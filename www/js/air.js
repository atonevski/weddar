// Generated by CoffeeScript 1.9.3
(function() {
  angular.module('app.air', []).controller('Air', function($scope, $http, $ionicLoading) {
    var MAKE_GRAPH_PATH, def, fmttm, levelColor, levels, sname, stations, url;
    MAKE_GRAPH_PATH = "http://airquality.moepp.gov.mk/graphs/site/pages/MakeGraph.php?";
    def = {
      station: 'SkopjeRegion',
      parameter: "PM10",
      timemode: "Day",
      time: Math.round((new Date()).getTime()),
      language: "mk",
      date: (new Date()).toISOString().slice(0, 10)
    };
    url = MAKE_GRAPH_PATH + ("language=" + def.language) + ("&parameter=" + def.parameter + "&station=" + def.station) + ("&i=" + def.time + "&endDate=" + def.date + "&timeMode=" + def.timemode) + "&graph=StationLineGraph&background=false";
    fmttm = function(s) {
      return s.slice(0, 4) + "-" + s.slice(4, 6) + "-" + s.slice(6, 8) + " " + s.slice(9, 11) + ":00";
    };
    levels = {
      good: {
        low: 0,
        high: 51
      },
      moderate: {
        low: 51,
        high: 101
      },
      sensitive: {
        low: 101,
        high: 251
      },
      unhealthy: {
        low: 251,
        high: 351
      },
      veryUnhealthy: {
        low: 351,
        high: 431
      },
      hazardous: {
        low: 431,
        high: 2000
      }
    };
    stations = {
      Centar: "Центар",
      Karpos: "Карпош",
      Lisice: "Лисиче",
      GaziBaba: "Гази Б.",
      Rektorat: "Ректор.",
      Miladinovci: "Милад.",
      Mrsevci: "Мршевци",
      Bitola1: "Битола 1",
      Bitola2: "Битола 2",
      Kicevo: "Кичево",
      Lazaropole: "Лазарополе",
      Tetovo: "Тетово",
      Veles1: "Велес 1",
      Veles2: "Велес 2",
      Kocani: "Кочани",
      Kavadarci: "Кавадарци",
      Kumanovo: "Куманово"
    };
    sname = function(s) {
      return stations[s];
    };
    $scope.sname = sname;
    levelColor = function(v) {
      if (!v) {
        return "#000";
      }
      if ((levels.good.low <= v && v < levels.good.high)) {
        return "#339933";
      } else if ((levels.moderate.low <= v && v < levels.moderate.high)) {
        return "#99ff33";
      } else if ((levels.sensitive.low <= v && v < levels.sensitive.high)) {
        return "#ff9966";
      } else if ((levels.unhealthy.low <= v && v < levels.unhealthy.high)) {
        return "#ff3366";
      } else if ((levels.veryUnhealthy.low <= v && v < levels.veryUnhealthy.high)) {
        return "#cc0066";
      } else if ((levels.hazardous.low <= v && v < levels.hazardous.high)) {
        return "#990066";
      }
    };
    $scope.levelColor = levelColor;
    $ionicLoading.show();
    return $http.get(url).then(function(res) {
      var data, i, k, len, m, measurements, ref, s, t, tms, v;
      $ionicLoading.hide();
      data = res.data;
      $scope.stations = (function() {
        var i, len, ref, results;
        ref = data.stations;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          s = ref[i];
          if (s !== 'Mrsevci') {
            results.push(s);
          }
        }
        return results;
      })();
      $scope.data = res.data;
      tms = Object.keys(data.measurements).sort();
      $scope.tms = tms;
      measurements = [];
      for (i = 0, len = tms.length; i < len; i++) {
        t = tms[i];
        m = {};
        ref = data.measurements[t];
        for (k in ref) {
          v = ref[k];
          if (!!v) {
            m[k] = parseFloat(v);
          }
        }
        measurements.push({
          time: fmttm(t),
          values: m
        });
      }
      $scope.measurements = measurements;
      return console.log(data);
    });
  }, function(res) {
    $ionicLoading.show({
      template: "Can't load air pollution data",
      duration: 3000
    });
    return console.log("error: " + res.status);
  });

}).call(this);
